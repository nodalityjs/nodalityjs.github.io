"use strict";(self.webpackChunknodality=self.webpackChunknodality||[]).push([[1014],{8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},9972:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"elements/responsive-wrapper","title":"Responsive wrapper","description":"The Wrapper class allows you to create a responsive element that can dynamically switch its layout between row and column orientations based on specified breakpoints. This is ideal for building adaptable web components with flexbox layouts.","source":"@site/docs/elements/responsive-wrapper.md","sourceDirName":"elements","slug":"/elements/responsive-wrapper","permalink":"/docs/elements/responsive-wrapper","draft":false,"unlisted":false,"editUrl":"https://github.com/nodalityjs/docs/edit/main/docs/elements/responsive-wrapper.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Offcanvas","permalink":"/docs/elements/offcanvas"},"next":{"title":"Row","permalink":"/docs/elements/row"}}');var r=s(4848),o=s(8453);const i={},l="Responsive wrapper",a={},c=[{value:"Description",id:"description",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example Layout:",id:"example-layout",level:3},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"responsive-wrapper",children:"Responsive wrapper"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Wrapper"})," class allows you to create a responsive element that can dynamically switch its layout between row and column orientations based on specified breakpoints. This is ideal for building adaptable web components with flexbox layouts."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'let elements = [\n  {\n    type: "responsive"\n  }\n];\n'})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["The operation generates a complex responsive ",(0,r.jsx)(n.code,{children:"div"})," structure."]}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"ranges"})}),": An array of breakpoint values (in pixels) that define the width thresholds where the layout transitions between row and column. For instance, ",(0,r.jsx)(n.code,{children:'"700px"'})," means the transition occurs at a width of 700 pixels."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sequence"})}),": A string specifying the flex direction sequence corresponding to the defined breakpoints. Use ",(0,r.jsx)(n.code,{children:'"col"'})," for column and ",(0,r.jsx)(n.code,{children:'"row"'})," for row. For example, ",(0,r.jsx)(n.code,{children:'"col-row-col"'})," indicates:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Column layout for widths up to the first breakpoint."}),"\n",(0,r.jsx)(n.li,{children:"Row layout between the first and second breakpoints."}),"\n",(0,r.jsx)(n.li,{children:"Column layout between the second and third breakpoints."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-layout",children:"Example Layout:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"0px to 700px"}),": Column layout"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"700px to 1200px"}),": Row layout"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1200px to 1400px"}),": Column layout"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1400px and above"}),": Row layout"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'new Wrapper() \n\t.set({\n\t\tbackground: "orange",\n\t\tresponsive: {\n\t\t\tranges: ["700px", "1200px", "1400px"],\n\t\t\tsequence: "col-row-col"\n\t\t}\n\t})\n\t.add([\n\t\tnew Image("mountains.jpg").set({\n\t\t\twidth: "auto",\n\t\t\theight: "100%",\n\t\t}),\n\n        new Wrapper().set({}).add([\n            new Text("Title").set({\n                fluidc: "S3",\n                font: "Arial"\n            }),\n\n            new Image("sea.png").set({\n                width: "100%"\n            })\n        ])\n\t]).render("#mount"); \n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"render"})," method attaches the constructed layout to the specified DOM element by its selector (e.g., ",(0,r.jsx)(n.code,{children:'"#mount"'}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"fluidc"})," property in ",(0,r.jsx)(n.code,{children:"Text"})," allows for scalable typography."]}),"\n",(0,r.jsx)(n.li,{children:"Breakpoints should be specified in ascending order for proper behavior."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);