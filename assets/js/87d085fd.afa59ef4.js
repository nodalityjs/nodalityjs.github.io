"use strict";(self.webpackChunknodality=self.webpackChunknodality||[]).push([[8147],{5063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"basics/integration","title":"Integration","description":"You can easily integrate this library with React.js and Vue.js libraries.","source":"@site/docs/basics/integration.md","sourceDirName":"basics","slug":"/basics/integration","permalink":"/docs/basics/integration","draft":false,"unlisted":false,"editUrl":"https://github.com/nodalityjs/docs/edit/main/docs/basics/integration.md","tags":[],"version":"current","frontMatter":{}}');var o=n(4848),r=n(8453);const i={},a="Integration",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"integration",children:"Integration"})}),"\n",(0,o.jsx)(t.p,{children:"You can easily integrate this library with React.js and Vue.js libraries."}),"\n",(0,o.jsxs)(t.p,{children:["You can use the ",(0,o.jsx)(t.code,{children:"Extracted"})," component to integrate this library into your React application."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'<Extracted view={\n    new Text("Hello React!")\n}/>\n'})}),"\n",(0,o.jsx)(t.p,{children:"Here, you can see a more complex example that fetches data from API a displays them in List."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'\n    function Detail(props) {\n        const [posts, setPosts] = React.useState([]);\n\n        React.useEffect(() => {\n            fetch(\'https://jsonplaceholder.typicode.com/posts\')\n                .then(response => response.json())\n                .then(json => setPosts(json.slice(0, 3)))\n                .catch(error => console.error(\'Error:\', error));\n        }, []);\n\n        const addPost = () => {\n            const newPost = {\n                id: posts.length + 1,\n                title: `Post ${posts.length + 1}`,\n            };\n\n            setPosts(prevPosts => [...prevPosts, newPost]);\n        };\n\n        return (\n            <div>\n                <h3>Detail</h3>\n                <Extracted view={\n                    new Text("Post count: " + posts.length)\n                        .set({ color: "green", font: "Arial", weight: "bold" })\n                } />\n\n                <Extracted view={ // also changes, Counter view outside does not\n                    new Text("Quotes")\n                        .set({ color: "green", font: "Arial" })\n                } />\n\n                <button onClick={() => props.setIsNav(true)}>\u2190</button>\n                { // adding vhanges all instances, not with regular h3, a bit worse performance\n                    posts.map(post => (\n                        <Extracted view={ // also changes, Counter view outside does not\n                            new Text(post.title).set({ color: "green", font: "Arial", weight: "bold" })\n                        } />\n                        // not changing with h3\n                        // <h3 key={post.id}>{post.title}</h3>\n                    ))\n                }\n                <button onClick={addPost}>Add Post</button>\n            </div>\n        );\n    }\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);